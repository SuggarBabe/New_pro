[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview of Tourism Trend and Corresponding Factors",
    "section": "",
    "text": "Author: Xiangzhi Chen, Zenan Wang, Zihao Huang, Jiachen Gao\nFrom: Georgetown University"
  },
  {
    "objectID": "index.html#gdp-on-tourism-not-really",
    "href": "index.html#gdp-on-tourism-not-really",
    "title": "Overview of Tourism Trend and Corresponding Factors",
    "section": "GDP on Tourism: Not Really",
    "text": "GDP on Tourism: Not Really\nTo further explore the relationship between countries’ economic strength and their tourism performance, we animated a bubble plot showing Tourism Expenditure vs GDP from 2000 to 2022.\nEach bubble represents a country, with:\n\nX-axis: Total tourism expenditure (in USD)\nY-axis: GDP (in USD)\nBubble size: Number of arrivals\n\nAs the animation plays across the years, a few key insights become clear:\n\nEconomic factors like GDP does not appear to be a direct driver of tourism:\n\nCountries like France, Spain, and the United Kingdom consistently have high tourism expenditures despite their moderate GDP compared to giants like the United States and China.\n\nThe United States stands out:\n\nIt is an exception where both GDP and tourism expenditure are extremely high, suggesting that for some destinations, economic size does help boost tourism spending.\n\nChina’s Position:\n\nAlthough China’s GDP grows rapidly during this period, its tourism expenditure remains relatively more modest.\n\nSpain and France punch above their weight:\n\nDespite having GDPs much smaller than China or the U.S., these countries attract huge tourism spending, reinforcing the idea that cultural and historical appeal outweighs pure economic power.\nOverall, “Tourists Chase Experiences, Not Really Economies”. GDP size doesn’t guarantee tourism success.\n\n\nCode\n# Load the data\narrival = pd.read_csv(\"../data/Processed_data/arrival.csv\")\nexpenditure = pd.read_csv(\"../data/Processed_data/expenditure.csv\")\n\n# Select time range\narrival_2010_2022 = arrival[(arrival['Years'] &gt;= 2000) & (arrival['Years'] &lt;= 2022)]\nexpenditure_2010_2022 = expenditure[(expenditure['Years'] &gt;= 2000) & (expenditure['Years'] &lt;= 2022)]\n\n# Interested countries to select\ncountries = ['CHINA', 'UNITED STATES OF AMERICA', 'FRANCE', 'UNITED KINGDOM', 'SPAIN', 'INDIA']\n# Filter by interested countries\narrival_selected = arrival_2010_2022[arrival_2010_2022['Country'].isin(countries)]\nexpenditure_selected = expenditure_2010_2022[expenditure_2010_2022['Country'].isin(countries)]\n\n# Rename columns\narrival_selected = arrival_selected.rename(columns={'Total arrivals (Thousands)': 'Total_arrival'})\nexpenditure_selected = expenditure_selected.rename(columns={\n    'Tourism expenditure in the country (US$ Millions)': 'Total_expend',\n    'Passenger transport (US$ Millions)': 'Passenger_expend',\n    'Travel (US$ Millions)': 'Travel_expend'\n})\n\n# Ensure numeric and handle missing values (for both datasets)\narrival_selected['Total_arrival'] = pd.to_numeric(arrival_selected['Total_arrival'], errors='coerce')\narrival_selected['Total_arrival'].fillna(0, inplace=True)\n\nexpenditure_selected['Total_expend'] = pd.to_numeric(expenditure_selected['Total_expend'], errors='coerce')\nexpenditure_selected['Total_expend'].fillna(0, inplace=True)\n\nexpenditure_selected['Passenger_expend'] = pd.to_numeric(expenditure_selected['Passenger_expend'], errors='coerce')\nexpenditure_selected['Passenger_expend'].fillna(0, inplace=True)\n\n# Merge the two datasets on 'Country' and 'Years'\nmerged_data = pd.merge(expenditure_selected, arrival_selected, on=['Country', 'Years'])\n\n# Select needed columns, change type, and drop NA\nmerged_data = merged_data[['Country', 'Years', 'Total_expend', 'Total_arrival']]\nmerged_data['Years'] = pd.to_numeric(merged_data['Years'], errors='coerce')\nmerged_data['Total_expend'] = pd.to_numeric(merged_data['Total_expend'], errors='coerce')\nmerged_data['Total_arrival'] = pd.to_numeric(merged_data['Total_arrival'], errors='coerce')\nmerged_data.dropna(inplace=True)\n\n# Drop rows where 'Total_arrival' is 0\nmerged_data = merged_data[merged_data['Total_arrival'] != 0]\n\nmerged_data['Total_arrival'] = merged_data['Total_arrival'] * 1000\nmerged_data['Total_expend'] = merged_data['Total_expend'] * 1000000\n\n# Read world bank data for GDP\nAll_Countries_Worldbank = pd.read_csv(\"../data/Processed_data/All_Countries_Worldbank.csv\")\nAll_Countries_Worldbank = All_Countries_Worldbank[['Country', 'Years', 'GDP (current US$)']]\n# Replace 'UNITED STATES' with 'UNITED STATES OF AMERICA' in the 'Country' column\nAll_Countries_Worldbank['Country'] = All_Countries_Worldbank['Country'].replace('UNITED STATES', 'UNITED STATES OF AMERICA')\n\n# Merge the two datasets on 'Country' and 'Years'\nmerged_data = pd.merge(merged_data, All_Countries_Worldbank, on=['Country', 'Years'], how='left')\n\n# Lock axis\nmax_x = merged_data['Total_expend'].max()\nmax_y = merged_data['GDP (current US$)'].max()\n\n# Animated plot\nfig = px.scatter(\n    merged_data,\n    x='Total_expend',\n    y='GDP (current US$)',\n    size='Total_arrival',\n    color='Country',\n    animation_frame='Years',\n    hover_name='Country',\n    size_max=60,\n    labels={\n        'Total_expend': 'Tourism Expenditure (US$)',\n        'GDP (current US$)': 'GDP (US$)',\n        'Total_arrival': 'Number of Arrivals'\n    },\n    title='Tourism Expenditure vs GDP (2000–2022)',\n)\n\n# Fixed axes values\nfig.update_layout(\n    geo=dict(showframe=False),\n    margin=dict(t=60, l=0, r=0, b=0),\n    xaxis=dict(\n        title='Tourism Expenditure (US$)',\n        range=[0, max_x],\n    ),\n    yaxis=dict(\n        title='GDP (US$)',\n        range=[0, max_y]\n    )\n)\n\nfig.show()\n\n\n\n                                                \nFigure 4: Bubble Plot"
  },
  {
    "objectID": "index.html#other-factors-related-to-tourism",
    "href": "index.html#other-factors-related-to-tourism",
    "title": "Overview of Tourism Trend and Corresponding Factors",
    "section": "Other Factors Related To Tourism",
    "text": "Other Factors Related To Tourism\nThe code identifies the top 10 countries with the highest tourist arrivals and uses Ridge Regression to estimate important contributing factors. A Sankey diagram then visualizes how different factors link to each country. The results show that overnight stays are major drivers for countries like Spain, Italy, and the United Kingdom. Passenger transportation is especially important for the United States and Mexico, while other tourism industries contribute notably to countries like Hungary and Poland. Although many features were included in the regression, only a few stand out clearly—most others appear less meaningful or possibly noisy.\n\n\nCode\n# Import libraries\nimport pandas as pd\nimport plotly.graph_objects as go\nimport numpy as np\nfrom sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import StandardScaler\n\n# Load uploaded datasets\narrival_df = pd.read_csv('../data/Processed_data/arrival.csv')\nemployment_df = pd.read_csv('../data/Processed_data/employment.csv')\nexpenditure_df = pd.read_csv('../data/Processed_data/expenditure.csv')\ndomestic_accommodation_df = pd.read_csv('../data/Processed_data/domestic_accommodation.csv')\n# Merge datasets\nmerged_df = arrival_df.merge(\n    employment_df, on=['Country', 'Years'], how='outer'\n).merge(\n    expenditure_df, on=['Country', 'Years'], how='outer'\n).merge(\n    domestic_accommodation_df, on=['Country', 'Years'], how='outer'\n)\n\n# Clean column names\nmerged_df.columns = merged_df.columns.str.replace(r'\\s+\\(.*?\\)', '', regex=True).str.strip().str.replace(' ', '_')\n\n# Find top arrival countries \nlatest_year = arrival_df['Years'].max()\narrival_latest = arrival_df[arrival_df['Years'] == latest_year]\ntop_arrivals = arrival_latest[['Country', 'Total arrivals (Thousands)']].sort_values(\n    by='Total arrivals (Thousands)', ascending=False\n).reset_index(drop=True)\ntop_countries = top_arrivals['Country'].head(10)  # Top 10 countries\n\n# Prepare feature dataset\nfeature_cols = [\n    'Overnights_visitors', 'Same-day_visitors',\n    'Accommodation_services_for_visitors', 'Food_and_beverage_serving_activities',\n    'Other_accommodation_services', 'Other_tourism_industries',\n    'Passenger_transportation', 'Total',\n    'Travel_agencies_and_other_reservation_services_activities',\n    'Passenger_transport', 'Tourism_expenditure_in_the_country',\n    'Travel', 'Guests', 'Overnights', 'hotel_guests', 'hotel_overnights'\n]\navailable_features = [col for col in feature_cols if col in merged_df.columns]\n\n# Filter for top countries and latest year\nfeature_df = merged_df[(merged_df['Country'].isin(top_countries)) & (merged_df['Years'] == latest_year)]\n\n# Prepare X and y\nX = feature_df[available_features].fillna(0)\ny = feature_df['Total_arrivals']\n\n# Standardize features\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n# Ridge Regression for feature importance\nridge_model = Ridge(alpha=1.0)\nridge_model.fit(X_scaled, y)\n\nridge_importance = pd.Series(ridge_model.coef_, index=available_features).sort_values(key=np.abs, ascending=False)\n\n# Prepare chord-like (sankey) plot\ntop_features = ridge_importance.abs().sort_values(ascending=False).head(8)\n\n# Labels = countries + features\nlabels = list(top_countries) + list(top_features.index)\nn_countries = len(top_countries)\nn_features = len(top_features)\n\n# Create connection matrix\nmatrix = np.zeros((n_countries + n_features, n_countries + n_features))\n\nfor i, country in enumerate(top_countries):\n    for j, feature in enumerate(top_features.index):\n        value = feature_df.loc[feature_df['Country'] == country, feature]\n        if not value.empty and not pd.isna(value.values[0]):\n            matrix[i, n_countries + j] = abs(value.values[0])\n\n# Normalize matrix for better scaling\nif matrix.max() &gt; 0:\n    matrix = matrix / matrix.max()\n\n# Build Sankey links\nlink = dict(source=[], target=[], value=[], color=[])\nfor i in range(n_countries):\n    for j in range(n_features):\n        if matrix[i, n_countries + j] &gt; 0:\n            link['source'].append(i)\n            link['target'].append(n_countries + j)\n            link['value'].append(matrix[i, n_countries + j])\n            link['color'].append('rgba(150,150,250,0.5)')\n\n# Build nodes\nnode = dict(\n    label=labels,\n    pad=15,\n    thickness=20,\n    line=dict(color=\"black\", width=0.5)\n)\n\n# Plot the Sankey diagram\nfig = go.Figure(data=[go.Sankey(link=link, node=node)])\nfig.update_layout(title_text=\"Top Countries and Factors Contributing to Tourist Arrivals\", font_size=10)\nfig.show()\n\n\n\n                                                \nFigure 5: Sankey Plot Visualizing Factors Contributing To Tourism\n\n\nTo allow a closer inspection, I also created a choropleth map highlighting these top countries. In this map, you can click on a country to view key tourism-related details such as Travel Agencies, Food and Beverage Services, and Other Accommodation Services, helping to better understand the tourism infrastructure behind the visitor numbers.\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\n\n# Merge data using OUTER JOIN to keep all countries\nmerged_df = pd.merge(employment_df, arrival_df, on=['Country', 'Years'], how='outer')\n\n# Clean column names\nmerged_df.columns = merged_df.columns.str.replace(r'\\s+\\(.*?\\)', '', regex=True).str.strip().str.replace(' ', '_')\n\n\n# List of countries to add stars\nhighlight_countries = [\n    'Mexico', 'Hungary', 'Poland', 'Italy', 'Spain', 'Türkiye', 'Denmark', 'Croatia', 'United Kingdom', 'United States'\n]\n\n# Hardcoded lat/lon for these countries\ncountry_coords = {\n    'Mexico': (23.6345, -102.5528),\n    'Hungary': (47.1625, 19.5033),\n    'Poland': (51.9194, 19.1451),\n    'Italy': (41.8719, 12.5674),\n    'Spain': (40.4637, -3.7492),\n    'Türkiye': (38.9637, 35.2433),\n    'Denmark': (56.2639, 9.5018),\n    'Croatia': (45.1000, 15.2000),\n    'United Kingdom': (55.3781, -3.4360),\n    'United States': (37.0902, -95.7129)\n}\n\n# Build Dropdown Buttons\nyears = sorted(merged_df['Years'].dropna().unique())\ndata_traces = []\nbuttons = []\n\nfor i, year in enumerate(years):\n    df_year = merged_df[merged_df['Years'] == year].copy()\n\n    df_year['text'] = (\n    \"Country: \" + df_year['Country'].fillna('NA') +\n    \"&lt;br&gt;Year: \" + df_year['Years'].astype(str) +\n     \"&lt;br&gt;Total Arrivals: \" + df_year['Total_arrivals'].fillna('NA').astype(str) + \"K\" +\n        \"&lt;br&gt;Overnight Visitors: \" + df_year['Overnights_visitors'].fillna('NA').astype(str) + \"K\" +\n        \"&lt;br&gt;Same-day Visitors: \" + df_year['Same-day_visitors'].fillna('NA').astype(str) + \"K\" +\n    \"&lt;br&gt;Food & Beverage Serving: \" + df_year['Food_and_beverage_serving_activities'].fillna('NA').astype(str) + \"K\" +\n    \"&lt;br&gt;Other Accommodation Services: \" + df_year['Other_accommodation_services'].fillna('NA').astype(str) + \"K\" +\n    \"&lt;br&gt;Other Tourism Industries: \" + df_year['Other_tourism_industries'].fillna('NA').astype(str) + \"K\" +\n    \"&lt;br&gt;Passenger Transportation: \" + df_year['Passenger_transportation'].fillna('NA').astype(str) + \"K\" +\n    \"&lt;br&gt;Travel Agencies & Reservation: \" + df_year['Travel_agencies_and_other_reservation_services_activities'].fillna('NA').astype(str) + \"K\"\n)\n\n    # Choropleth for arrivals\n    choropleth = go.Choropleth(\n        locations=df_year['Country'],\n        locationmode=\"country names\",\n        z=df_year['Total_arrivals'],\n        text=df_year['text'],\n        colorscale='YlGnBu',\n        colorbar_title=\"Arrivals (Thousands)\",\n        hovertemplate=\"%{text}&lt;extra&gt;&lt;/extra&gt;\",\n        zmin=0,\n        zmax=merged_df['Total_arrivals'].max(),\n        visible=(i == 0)\n    )\n\n    # Scattergeo for stars on highlighted countries (with hardcoded lat/lon)\n    lats = [country_coords[country][0] for country in highlight_countries]\n    lons = [country_coords[country][1] for country in highlight_countries]\n\n    stars = go.Scattergeo(\n        lat=lats,\n        lon=lons,\n        mode='markers',\n        marker=dict(\n            size=8,\n            symbol='star',\n            color='black'\n        ),\n        hoverinfo='skip',\n        visible=(i == 0)\n    )\n\n    # Append both traces for this year\n    data_traces.append(choropleth)\n    data_traces.append(stars)\n\n    # Visibility settings: two traces per year\n    visibility = [False] * (2 * len(years))\n    visibility[2*i] = True\n    visibility[2*i+1] = True\n\n    buttons.append(dict(\n        label=str(year),\n        method='update',\n        args=[{'visible': visibility},\n              {'title': f'Tourist Arrivals and Other Relevant Indexes in {year}'}]\n    ))\n\n# Layout\nlayout = go.Layout(\n    title=f\"Tourist Arrivals and Other Relevant Indexes in {years[0]}\",\n    geo=dict(\n        showframe=False,\n        showcoastlines=True,\n        projection_type='natural earth'\n    ),\n    height=750,\n    margin=dict(l=50, r=50, t=70, b=40),\n    updatemenus=[dict(\n        active=0,\n        buttons=buttons,\n        direction=\"down\",\n        x=0.01,\n        y=0.9,\n        showactive=True,\n        xanchor=\"left\",\n        yanchor=\"top\"\n    )]\n)\n\n# Assemble and Show\nfig = go.Figure(data=data_traces, layout=layout)\nfig.show()\n\n\n\n                                                \nFigure 6: Interactive Choropleth Map Displaying Global Arrival\n\n\nSeparately, another analysis was conducted to examine which features are most strongly correlated with total tourist arrivals. By merging datasets and calculating Pearson correlations, the code identifies the top factors influencing tourism success. The bar chart shows that overnight visitors, food and beverage services, and same-day visitors have the highest positive correlations with total arrivals, suggesting that a strong visitor experience and service offerings are closely tied to high tourism numbers. Travel and tourism expenditures also show meaningful relationships, while some factors like hotel overnights and cruise passengers have lower correlations than expected. Overall, the analysis highlights that enhancing the visitor experience beyond just lodging is crucial for attracting and sustaining tourism.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Merge on Country and Years\nmerged_df = (\n    arrival_df\n    .merge(employment_df, on=['Country', 'Years'], how='left')\n    .merge(domestic_accommodation_df, on=['Country', 'Years'], how='left')\n    .merge(expenditure_df, on=['Country', 'Years'], how='left')\n)\n\n# Filter to all years before 2020\ndf_before_2020 = merged_df[merged_df['Years'] &lt; 2020]\n\n# Drop rows without total arrival data\ndf_before_2020 = df_before_2020.dropna(subset=['Total arrivals (Thousands)'])\n\n# Define features by their original names\nfeatures = [\n    'Overnights visitors (tourists) (Thousands)',\n    'Same-day visitors (excursionists) (Thousands)',\n    'of which, cruise passengers (Thousands)',\n    'Accommodation services for visitors (hotels and similar establishments) (Thousands)',\n    'Food and beverage serving activities (Thousands)',\n    'Other accommodation services (Thousands)',\n    'Other tourism industries (Thousands)',\n    'Passenger transportation (Thousands)',\n    'Total (Thousands)',\n    'Travel agencies and other reservation services activities (Thousands)',\n    'Guests (Thousands)',\n    'Overnights (Thousands)',\n    'hotel_guests (Thousands)',\n    'hotel_overnights (Thousands)',\n    'Passenger transport (US$ Millions)',\n    'Tourism expenditure in the country (US$ Millions)',\n    'Travel (US$ Millions)'\n]\n\n# Shorter feature names\nfeature_name_mapping = {\n    'Overnights visitors (tourists) (Thousands)': 'Overnight Visitors',\n    'Same-day visitors (excursionists) (Thousands)': 'Same-day Visitors',\n    'of which, cruise passengers (Thousands)': 'Cruise Passengers',\n    'Accommodation services for visitors (hotels and similar establishments) (Thousands)': 'Accommodation Services',\n    'Food and beverage serving activities (Thousands)': 'Food & Beverage Services',\n    'Other accommodation services (Thousands)': 'Other Accommodation',\n    'Other tourism industries (Thousands)': 'Other Tourism Industries',\n    'Passenger transportation (Thousands)': 'Passenger Transportation',\n    'Total (Thousands)': 'Total Employment',\n    'Travel agencies and other reservation services activities (Thousands)': 'Travel Agencies',\n    'Guests (Thousands)': 'Guests',\n    'Overnights (Thousands)': 'Overnights',\n    'hotel_guests (Thousands)': 'Hotel Guests',\n    'hotel_overnights (Thousands)': 'Hotel Overnights',\n    'Passenger transport (US$ Millions)': 'Passenger Transport Spending',\n    'Tourism expenditure in the country (US$ Millions)': 'Tourism Expenditure',\n    'Travel (US$ Millions)': 'Travel Spending'\n}\n\n# Compute Pearson correlation with Total arrivals\ncorr_matrix = df_before_2020[features + ['Total arrivals (Thousands)']]\ncorr_with_arrivals = corr_matrix.corr()['Total arrivals (Thousands)'].drop('Total arrivals (Thousands)')\ncorr_sorted = corr_with_arrivals.abs().sort_values(ascending=False)\n\n# Prepare shorter labels for top features\ntop_feats = corr_sorted.head(10).index\nshort_labels = [feature_name_mapping[feat] for feat in top_feats]\n\n# Plot\nplt.figure(figsize=(7, 5))\nsns.barplot(x=corr_with_arrivals[top_feats], y=short_labels, palette='viridis')\nplt.xlabel('Correlation Coefficient\\nwith Total Arrivals')\nplt.title('Top 10 Features Correlated with Tourist Arrivals (Before 2020)')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nFigure 7: Top Features Related To Tourism"
  },
  {
    "objectID": "index.html#tourism-on-gdp-positive-effect",
    "href": "index.html#tourism-on-gdp-positive-effect",
    "title": "Overview of Tourism Trend and Corresponding Factors",
    "section": "Tourism on GDP: Positive Effect",
    "text": "Tourism on GDP: Positive Effect\nTo explore the relationships between economic scale and tourism activity, we created an interactive parallel coordinates plot linking GDP, tourism expenditure, tourist arrivals, and years from 2010 to 2022. Each line represents a country-year observation, and users can highlight individual countries to examine their trajectories in more detail.\nChina exhibits massive GDP growth across the period, but its tourism expenditure and arrivals grow only modestly, showing that tourism remains a relatively small part of its overall economy.\nFrance maintains a balanced profile, with consistently strong tourism expenditure and arrivals relative to its GDP, underscoring the important role tourism plays in its economy.\nIndia demonstrates steady growth across GDP, expenditure, and arrivals, reflecting an emerging but still modest tourism sector.\nSpain stands out as highly dependent on tourism, with tourism expenditure and arrivals forming a large share relative to its GDP, making it particularly sensitive to external shocks like the COVID-19 pandemic.\nThe United Kingdom shows stable GDP and moderate tourism activity, with tourism playing a meaningful but not dominant role.\n\n\nCode\npd.DataFrame.iteritems = pd.DataFrame.items\n\n# Load the data\narrival = pd.read_csv(\"../data/Processed_data/arrival.csv\")\nexpenditure = pd.read_csv(\"../data/Processed_data/expenditure.csv\")\n\n# Select time range\narrival_2010_2022 = arrival[(arrival['Years'] &gt;= 2010) & (arrival['Years'] &lt;= 2022)]\nexpenditure_2010_2022 = expenditure[(expenditure['Years'] &gt;= 2010) & (expenditure['Years'] &lt;= 2022)]\n\n# Interested countries to select\ncountries = ['CHINA', 'UNITED STATES OF AMERICA', 'FRANCE', 'UNITED KINGDOM', 'SPAIN', 'INDIA']\n\n# Filter by interested countries\narrival_selected = arrival_2010_2022[arrival_2010_2022['Country'].isin(countries)]\nexpenditure_selected = expenditure_2010_2022[expenditure_2010_2022['Country'].isin(countries)]\n\ncountries_high = ['CHINA', 'UNITED STATES OF AMERICA']\n\n# Filter by interested countries\narrival_selected = arrival_2010_2022[arrival_2010_2022['Country'].isin(countries_high)]\nexpenditure_selected = expenditure_2010_2022[expenditure_2010_2022['Country'].isin(countries_high)]\n\n# Rename columns\narrival_selected = arrival_selected.rename(columns={'Total arrivals (Thousands)': 'Total_arrival'})\nexpenditure_selected = expenditure_selected.rename(columns={\n    'Tourism expenditure in the country (US$ Millions)': 'Total_expend',\n    'Passenger transport (US$ Millions)': 'Passenger_expend',\n    'Travel (US$ Millions)': 'Travel_expend'\n})\n\n# Ensure numeric and handle missing values (for both datasets)\narrival_selected['Total_arrival'] = pd.to_numeric(arrival_selected['Total_arrival'], errors='coerce')\narrival_selected['Total_arrival'].fillna(0, inplace=True)\n\nexpenditure_selected['Total_expend'] = pd.to_numeric(expenditure_selected['Total_expend'], errors='coerce')\nexpenditure_selected['Total_expend'].fillna(0, inplace=True)\n\nexpenditure_selected['Passenger_expend'] = pd.to_numeric(expenditure_selected['Passenger_expend'], errors='coerce')\nexpenditure_selected['Passenger_expend'].fillna(0, inplace=True)\n\n# Merge the two datasets on 'Country' and 'Years'\nmerged_data = pd.merge(expenditure_selected, arrival_selected, on=['Country', 'Years'])\n\n# Select needed columns, change type, and drop NA\nmerged_data = merged_data[['Country', 'Years', 'Total_expend', 'Total_arrival']]\nmerged_data['Years'] = pd.to_numeric(merged_data['Years'], errors='coerce')\nmerged_data['Total_expend'] = pd.to_numeric(merged_data['Total_expend'], errors='coerce')\nmerged_data['Total_arrival'] = pd.to_numeric(merged_data['Total_arrival'], errors='coerce')\nmerged_data.dropna(inplace=True)\n\n# Drop rows where 'Total_arrival' is 0\nmerged_data = merged_data[merged_data['Total_arrival'] != 0]\n\nmerged_data['Total_arrival'] = merged_data['Total_arrival'] * 1000\nmerged_data['Total_expend'] = merged_data['Total_expend'] * 1000000\n\n# Read world bank data for GDP\nAll_Countries_Worldbank = pd.read_csv(\"../data/Processed_data/All_Countries_Worldbank.csv\")\nAll_Countries_Worldbank = All_Countries_Worldbank[['Country', 'Years', 'GDP (current US$)']]\n# Replace 'UNITED STATES' with 'UNITED STATES OF AMERICA' in the 'Country' column\nAll_Countries_Worldbank['Country'] = All_Countries_Worldbank['Country'].replace('UNITED STATES', 'UNITED STATES OF AMERICA')\n\n# Merge the two datasets on 'Country' and 'Years'\nmerged_data = pd.merge(merged_data, All_Countries_Worldbank, on=['Country', 'Years'], how='left')\n\n# Create a numerical encoding for the 'Country' column\nmerged_data['Country'] = merged_data['Country'].astype('category')\nmerged_data['Country_Code'] = merged_data['Country'].cat.codes\n\n# Plotly\nfig = px.parallel_coordinates(merged_data, color=\"Country_Code\",\n                              dimensions=['GDP (current US$)', 'Total_expend', 'Total_arrival', 'Years'],\n                              color_continuous_scale=px.colors.qualitative.Set1,\n                              color_continuous_midpoint=1, range_color = [0, 1.5],\n                              title = \"Relations For Inbound Arrivals, Expenditure, and GDP (Higher GDP Tier)\", width = 800, height = 600)\nfig.update_layout(\n    margin=dict(t=100, l=50, r=50, b=50),\n    title=dict(y=0.95),\n    coloraxis_colorbar=dict(\n        tickvals=list(range(len(merged_data['Country'].cat.categories))),  # Match ticks with country codes\n        ticktext=merged_data['Country'].cat.categories.tolist(),  # Show country names instead of numeric codes\n        title=\"Countries\"\n    ),\n    showlegend=True  # Ensure the legend is visible\n)\nfig.show()\n\n\n\n                                                \nFigure 8: Parallel Coordinate Plot: Higher Tier\n\n\n\n\nCode\ncountries_low = ['FRANCE', 'UNITED KINGDOM', 'SPAIN', 'INDIA']\n\n# Filter by interested countries\narrival_selected = arrival_2010_2022[arrival_2010_2022['Country'].isin(countries_low)]\nexpenditure_selected = expenditure_2010_2022[expenditure_2010_2022['Country'].isin(countries_low)]\n\n# Rename columns\narrival_selected = arrival_selected.rename(columns={'Total arrivals (Thousands)': 'Total_arrival'})\nexpenditure_selected = expenditure_selected.rename(columns={\n    'Tourism expenditure in the country (US$ Millions)': 'Total_expend',\n    'Passenger transport (US$ Millions)': 'Passenger_expend',\n    'Travel (US$ Millions)': 'Travel_expend'\n})\n\n# Ensure numeric and handle missing values (for both datasets)\narrival_selected['Total_arrival'] = pd.to_numeric(arrival_selected['Total_arrival'], errors='coerce')\narrival_selected['Total_arrival'].fillna(0, inplace=True)\n\nexpenditure_selected['Total_expend'] = pd.to_numeric(expenditure_selected['Total_expend'], errors='coerce')\nexpenditure_selected['Total_expend'].fillna(0, inplace=True)\n\nexpenditure_selected['Passenger_expend'] = pd.to_numeric(expenditure_selected['Passenger_expend'], errors='coerce')\nexpenditure_selected['Passenger_expend'].fillna(0, inplace=True)\n\n# Merge the two datasets on 'Country' and 'Years'\nmerged_data = pd.merge(expenditure_selected, arrival_selected, on=['Country', 'Years'])\n\n# Select needed columns, change type, and drop NA\nmerged_data = merged_data[['Country', 'Years', 'Total_expend', 'Total_arrival']]\nmerged_data['Years'] = pd.to_numeric(merged_data['Years'], errors='coerce')\nmerged_data['Total_expend'] = pd.to_numeric(merged_data['Total_expend'], errors='coerce')\nmerged_data['Total_arrival'] = pd.to_numeric(merged_data['Total_arrival'], errors='coerce')\nmerged_data.dropna(inplace=True)\n\n# Drop rows where 'Total_arrival' is 0\nmerged_data = merged_data[merged_data['Total_arrival'] != 0]\n\nmerged_data['Total_arrival'] = merged_data['Total_arrival'] * 1000\nmerged_data['Total_expend'] = merged_data['Total_expend'] * 1000000\n\n# Read world bank data for GDP\nAll_Countries_Worldbank = pd.read_csv(\"../data/Processed_data/All_Countries_Worldbank.csv\")\nAll_Countries_Worldbank = All_Countries_Worldbank[['Country', 'Years', 'GDP (current US$)']]\n# Replace 'UNITED STATES' with 'UNITED STATES OF AMERICA' in the 'Country' column\nAll_Countries_Worldbank['Country'] = All_Countries_Worldbank['Country'].replace('UNITED STATES', 'UNITED STATES OF AMERICA')\n\n# Merge the two datasets on 'Country' and 'Years'\nmerged_data = pd.merge(merged_data, All_Countries_Worldbank, on=['Country', 'Years'], how='left')\n\n# Create a numerical encoding for the 'Country' column\nmerged_data['Country'] = merged_data['Country'].astype('category')\nmerged_data['Country_Code'] = merged_data['Country'].cat.codes\n\n# Plotly\nfig = px.parallel_coordinates(merged_data, color=\"Country_Code\",\n                              dimensions=['GDP (current US$)', 'Total_expend', 'Total_arrival', 'Years'],\n                              color_continuous_scale=px.colors.qualitative.Set1,\n                              color_continuous_midpoint=1, range_color = [0, 3.5],\n                              title = \"Relations For Inbound Arrivals, Expenditure, and GDP (Lower GDP Tier)\", width = 800, height = 600)\nfig.update_layout(\n    margin=dict(t=100, l=50, r=50, b=50),\n    title=dict(y=0.95),\n    coloraxis_colorbar=dict(\n        tickvals=list(range(len(merged_data['Country'].cat.categories))),  # Match ticks with country codes\n        ticktext=merged_data['Country'].cat.categories.tolist(),  # Show country names instead of numeric codes\n        title=\"Countries\"\n    ),\n    showlegend=True  # Ensure the legend is visible\n)\nfig.show()\n\n\n\n                                                \nFigure 9: Parallel Coordinate Plot: Lower Tier"
  },
  {
    "objectID": "index.html#tourism-and-employment",
    "href": "index.html#tourism-and-employment",
    "title": "Overview of Tourism Trend and Corresponding Factors",
    "section": "Tourism and Employment",
    "text": "Tourism and Employment\nTourism growth has consistently driven job creation across all six markets. China and India’s visitor numbers surged 4–6× since 2000, fueling substantial employment gains even in capital-intensive sectors. France and the U.K., despite more modest arrival increases, generated proportionally greater jobs, showcasing labor-rich tourism models. In the U.S. and Spain, tourism and employment rose hand-in-hand through 2019 and rebounded strongly after the 2020 downturn. Overall, rising arrivals translate directly into more tourism-sector jobs, confirming a clear, positive impact of tourism on employment.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\narrival = pd.read_csv('../data/Processed_data/arrival.csv')\nemployment = pd.read_csv('../data/Processed_data/employment.csv')\n\ntarget = [\n    'TAIWAN PROVINCE OF CHINA',\n    'UNITED KINGDOM',\n    'UNITED STATES OF AMERICA',\n    'INDIA',\n    'FRANCE',\n    'SPAIN'\n]\nrename_map = {\n    'TAIWAN PROVINCE OF CHINA': 'China',\n    'UNITED KINGDOM': 'United Kingdom',\n    'UNITED STATES OF AMERICA': 'United States',\n    'INDIA': 'India',\n    'FRANCE': 'France',\n    'SPAIN': 'Spain'\n}\n\narr = arrival[arrival['Country'].isin(target)].copy()\nemp = employment[employment['Country'].isin(target)].copy()\narr['Country'] = arr['Country'].replace(rename_map)\nemp['Country'] = emp['Country'].replace(rename_map)\n\narr_pivot = arr.pivot(index='Years', columns='Country', values='Total arrivals (Thousands)')\nemp_pivot = emp.pivot(index='Years', columns='Country', values='Total (Thousands)')\n\ncountries = ['China', 'United Kingdom', 'United States', 'India', 'France', 'Spain']\narr_index = pd.DataFrame(index=arr_pivot.index)\nemp_index = pd.DataFrame(index=emp_pivot.index)\nbase_years = {}\n\nfor country in countries:\n    arr_years = set(arr_pivot.index[arr_pivot[country].notna()])\n    emp_years = set(emp_pivot.index[emp_pivot[country].notna()])\n    common_years = sorted(arr_years & emp_years)\n    if not common_years:\n        continue\n    base = common_years[0]\n    base_years[country] = base\n    arr_index[country] = arr_pivot[country] / arr_pivot.loc[base, country] * 100\n    emp_index[country] = emp_pivot[country] / emp_pivot.loc[base, country] * 100\n\nymin = min(arr_index.min().min(), emp_index.min().min()) * 0.9\nymax = max(arr_index.max().max(), emp_index.max().max()) * 1.1\n\nfig, axes = plt.subplots(2, 3, figsize=(10, 6), sharex=True, sharey=True)\naxes = axes.flatten()\n\nfor ax, country in zip(axes, countries):\n    base = base_years.get(country, None)\n    ax.plot(arr_index.index, arr_index[country], label='Arrivals', color='tab:blue', linewidth=1.5)\n    ax.plot(emp_index.index, emp_index[country], label='Employment', color='tab:red', linestyle='--', linewidth=1.5)\n    ax.set_title(country)\n    ax.set_xlabel('Year')\n    ax.set_ylabel('Index (100 = base)')\n    ax.set_ylim(ymin, ymax)\n    ax.grid(True, linestyle=':', linewidth=0.5)\n    ax.legend(loc='upper left', fontsize='small')\n\nplt.suptitle('Indexed Growth: Tourism vs. Employment', fontsize=16)\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.show()\n\n\n\n\n\nFigure 10: Indexed Growth: Tourism vs. Employment"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Github Repo Link",
    "section": "",
    "text": "Website to the Github Repo: https://github.com/gu-dsan5200/dsan5200-spring2025-project-group-05"
  }
]